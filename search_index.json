[
["json.html", "42 JSON Data 42.1 JSON Basics 42.2 Understanding JSON Syntax 42.3 JSON R packages", " 42 JSON Data The goal of this chapter is to provide an introduction for handling JSON data in R. We’ll cover the following topics: JSON Basics R packages for JSON data Reading JSON data from the Web 42.1 JSON Basics JSON stands for JavaScript Object Notation and it is a format for representing data. More formally, we can say that it is a text-based way to store and transmit structured data. By using a simple syntax, you can easily store anything from a single number to strings, JSON-arrays, and JSON-objects using nothing but a string of plain text. As you will see, you can also nest arrays and objects, allowing you to create complex data structures. Let’s first talk about what JSON is and why is important. JSON is a data representation format very similar to XML. It’s used widely across the internet for almost every single API that you will access as well as for config files and things such as games and text editors. It’s popularity is based on a handful of attractive aspects: It’s extremely lightweight and compact to send back and forth due to the small size file; It’s easy for both computers and people to read (and write) compared to something like XML since it’s much cleaner and there’s not as many opening and closing tags; It maps very easily onto the data structures used by most programming languages (numbers, strings, booleans, nulls, arrays and associative arrays); It also integrates very nicely with javascript since JSON is just a superset of javascript which means anything you write in JSON is valid javascript, which is a language used all throughout the web for front-end or back-end of applications. Also, every single major language has some form of library or packages with built-in functionalty to parse JSON strings into objects or classes in that language which makes working with JSON data extremely easy inside of a programming language. Why should we care about JSON? When working with data from the Web, we’ll inevitably find some JSON data because it is commonly used in web applications to send data from the server to the browser. As a matter of fact, in your data science career you will be using JSON quite often, whether it is consuming an API, creating an API, or creating config files for you or other people to use for your application. 42.2 Understanding JSON Syntax Let’s now talk about the syntax used in JSON. 42.2.1 Data Types The first thing to talk about is the data types or values that JSON can represent. As we know, JSON is a data representation format, so we need to be able to represent certain data types within it. JSON supports the following types: string (in double quotes) number (in any format whether they’re decimal numbers, integers, negative numbers, even numbers in scientific notation) true and false (booleans) null 42.2.2 Arrays JSON also supports arrays (in JSON Sense) which are sets of data types defined within brackets, and contains a comma-separated list of values. For example [1, 2, 2] or [\"computing\", \"with\", \"data\"], which can be a set of any of the data types listed above. We typically use arrays when we have a set of unnamed values, this is why some people refer to them as ordered unnamed arrays. The closest R object to a JSON array would be a vector: JSON: [ 1, 2, 3, ... ]; -vs- R: c(1, 2, 3, ...) JSON: [ true, true, false, ... ]; -vs- R: c(TRUE, TRUE, FALSE, ...) 42.2.3 Objects Another type of data container is the so-called JSON object, which is the most complex but also the most used type of object within JSON, and it allows you to represent values that are key-value pairs: {\"key\": \"value\"} You use curly braces to define an object, and inside the braces you put key-value pairs. The key must be surrounded by double quotes, followed by a colon, followed by the value. For example, say the key is \"year\" and the value 2000, then a simple JSON array will look like this: {\"year\": 2000} Another example can be a key \"name\" and a value \"Jessica\": {\"name\": \"Jessica\"} If you have multiple key-value pairs, you separate each of them with a comma: { &quot;name1&quot;: &quot;Nicole&quot;, &quot;name2&quot;: &quot;Pleuni&quot;, &quot;name3&quot;: &quot;Rori&quot; } Because the data inside a JSON object is formed of key-value pairs, you could think of them as named arrays. What do JSON-objects correspond to in R? Well, there’s not really a unique correspondence between a JSON-object and its equivalent in R. For instance, we could use a named vector to store the same data in the JSON-object previously displayed: # named vector in R c(&quot;name1&quot; = &quot;Nicole&quot;, &quot;name2&quot; = &quot;Pleuni&quot;, &quot;name3&quot; = &quot;Rori&quot;) Or we could also use a list: # named list in R list(&quot;name1&quot; = &quot;Nicole&quot;, &quot;name2&quot; = &quot;Pleuni&quot;, &quot;name3&quot; = &quot;Rori&quot;) However, JSON-objects can be more complex than this basic example. Perhaps the similar container in R is a list. 42.2.4 Examples of JSON Data Containers Here’s a series of examples involving combinations of JSON arrays and objects. JSON containers can be nested. Here’s one example: { &quot;name&quot;: [&quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;], &quot;grams&quot;: [300, 200, 500], &quot;qty&quot;: [4, 5, null], &quot;new&quot;: [true, false, true], } Here’s another example of nested containers: [ { &quot;name&quot;: &quot;X&quot;, &quot;grams&quot;: 300, &quot;qty&quot;: 4, &quot;new&quot;: true }, { &quot;name&quot;: &quot;Y&quot;, &quot;grams&quot;: 200, &quot;qty&quot;: 5, &quot;new&quot;: false }, { &quot;name&quot;: &quot;Z&quot;, &quot;grams&quot;: 500, &quot;qty&quot;: null, &quot;new&quot;: true} ] 42.2.5 Data Table Toy Example Let’s consider a less basic example Name Gender Homeland Born Jedi Anakin male Tatooine 41.9BBY yes Amidala female Naboo 46BBY no Luke male Tatooine 19BBY yes Leia female Alderaan 19BBY no Obi-Wan male Stewjon 57BBY yes Han male Corellia 29BBY no Palpatine male Naboo 82BBY no R2-D2 unknown Naboo 33BBY no There are several ways to represent this data in JSON format. One option could be an array that contains objects. Each object represents an individual [ { &quot;Name&quot;: &quot;Anakin&quot;, &quot;Gender&quot;: &quot;male&quot;, &quot;Homeworld&quot;: &quot;Tatooine&quot;, &quot;Born&quot;: &quot;41.9BBY&quot;, &quot;Jedi&quot;: &quot;yes&quot; }, { &quot;Name&quot;: &quot;Amidala&quot;, &quot;Gender&quot;: &quot;female&quot;, &quot;Homeworld&quot;: &quot;Naboo&quot;, &quot;Born&quot;: 46BBY&quot;, &quot;Jedi&quot;: &quot;no&quot; }, ... { &quot;Name&quot;: &quot;R2-D2&quot;, &quot;Gender&quot;: &quot;unknown&quot;, &quot;Homeworld&quot;: &quot;Naboo&quot;, &quot;Born&quot;: &quot;33BBY&quot;, &quot;Jedi&quot;: &quot;no&quot; }, ] Another way to represent the data in the table above is by using an object containing key-value pairs in which the keys are the names of the columns, and the pairs are arrays (the actual data values in each column). { &quot;Name&quot;: [ &quot;Anakin&quot;, &quot;Amidala&quot;, &quot;Luke&quot;, ... , &quot;R2-D2&quot; ], &quot;Gender&quot;: [ &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, ... , &quot;unknown&quot; ], &quot;Homeworld&quot;: [ &quot;Tatooine&quot;, &quot;Naboo&quot;, &quot;Tatooine&quot;, ... , &quot;Naboo&quot; ], &quot;Born&quot;: [ &quot;41.9BBY&quot;, &quot;46BBY&quot;, &quot;19BBY&quot;, ... , &quot;33BBY&quot; ], &quot;Jedi&quot;: [ &quot;yes&quot;, &quot;no&quot;, &quot;yes&quot;, ... , &quot;no&quot; ] } 42.3 JSON R packages R has 3 packages for working with JSON data \"RJSONIO\" by Duncan Temple Lang \"rjson\" by Alex Couture-Beil \"jsonlite\" by Jeroen Ooms, Duncan Temple Lang, Jonathan Wallace All packages provide 2 main functions, toJSON() and fromJSON(), that allow conversion to and from data in JSON format, respectively. We’ll focus on the functions from \"rjson\". There are 2 primary functions in \"rjson\": toJSON() converts an R object to a string in JSON fromJSON() converts JSON content to R objects The usage is: toJSON(x, container = isContainer(x, asIs, .level), collapse = &quot;\\n&quot;, ...) x the R object to be converted to JSON format container whether to treat the object as a vector/container or a scalar collapse string used as separator when combining the individual lines of the generated JSON content ... additional arguments controlling the JSON formatting Let’ see an example in R: # toy data sw_data &lt;- rbind( c(&quot;Anakin&quot;, &quot;male&quot;, &quot;Tatooine&quot;, &quot;41.9BBY&quot;, &quot;yes&quot;), c(&quot;Amidala&quot;, &quot;female&quot;, &quot;Naboo&quot;, &quot;46BBY&quot;, &quot;no&quot;), c(&quot;Luke&quot;, &quot;male&quot;, &quot;Tatooine&quot;, &quot;19BBY&quot;, &quot;yes&quot;), c(&quot;Leia&quot;, &quot;female&quot;, &quot;Alderaan&quot;, &quot;19BBY&quot;, &quot;no&quot;) ) # convert to data.frame and add column names swdf &lt;- data.frame(sw_data, stringsAsFactors = FALSE) names(swdf) &lt;- c(&quot;Name&quot;, &quot;Gender&quot;, &quot;Homeworld&quot;, &quot;Born&quot;, &quot;Jedi&quot;) swdf #&gt; Name Gender Homeworld Born Jedi #&gt; 1 Anakin male Tatooine 41.9BBY yes #&gt; 2 Amidala female Naboo 46BBY no #&gt; 3 Luke male Tatooine 19BBY yes #&gt; 4 Leia female Alderaan 19BBY no We use the function toJSON() to convert the data frame swdf into a JSON object: # convert R data.frame to JSON sw_json = toJSON(swdf) # what class? class(sw_json) # display JSON format sw_json R will print some text following the rules of strings in R. However, the representation of the JSON object corresponds to the following string: { &quot;Name&quot;: [&quot;Anakin&quot;,&quot;Amidala&quot;,&quot;Luke&quot;,&quot;Leia&quot;], &quot;Gender&quot;: [&quot;male&quot;,&quot;female&quot;,&quot;male&quot;,&quot;female&quot;], &quot;Homeworld&quot;: [&quot;Tatooine&quot;,&quot;Naboo&quot;,&quot;Tatooine&quot;,&quot;Alderaan&quot;], &quot;Born&quot;: [&quot;41.9BBY&quot;,&quot;46BBY&quot;,&quot;19BBY&quot;,&quot;19BBY&quot;], &quot;Jedi&quot;: [&quot;yes&quot;,&quot;no&quot;,&quot;yes&quot;,&quot;no&quot;] } We can add more rows to the data: # toy data sw_data2 &lt;- rbind( c(&quot;Anakin&quot;, &quot;male&quot;, &quot;Tatooine&quot;, &quot;41.9BBY&quot;, &quot;yes&quot;), c(&quot;Amidala&quot;, &quot;female&quot;, &quot;Naboo&quot;, &quot;46BBY&quot;, &quot;no&quot;), c(&quot;Luke&quot;, &quot;male&quot;, &quot;Tatooine&quot;, &quot;19BBY&quot;, &quot;yes&quot;), c(&quot;Leia&quot;, &quot;female&quot;, &quot;Alderaan&quot;, &quot;19BBY&quot;, &quot;no&quot;), c(&quot;Obi-Wan&quot;, &quot;male&quot;, &quot;Stewjon&quot;, &quot;57BBY&quot;, &quot;yes&quot;), c(&quot;Han&quot;, &quot;male&quot;, &quot;Corellia&quot;, &quot;29BBY&quot;, &quot;no&quot;), c(&quot;Palpatine&quot;, &quot;male&quot;, &quot;Naboo&quot;, &quot;82BBY&quot;, &quot;no&quot;), c(&quot;R2-D2&quot;, &quot;unknown&quot;, &quot;Naboo&quot;, &quot;33BBY&quot;, &quot;no&quot;)) # convert to data.frame and add column names swdf2 &lt;- data.frame(sw_data2, stringsAsFactors = FALSE) names(swdf2) &lt;- c(&quot;Name&quot;, &quot;Gender&quot;, &quot;Homeworld&quot;, &quot;Born&quot;, &quot;Jedi&quot;) swdf2 #&gt; Name Gender Homeworld Born Jedi #&gt; 1 Anakin male Tatooine 41.9BBY yes #&gt; 2 Amidala female Naboo 46BBY no #&gt; 3 Luke male Tatooine 19BBY yes #&gt; 4 Leia female Alderaan 19BBY no #&gt; 5 Obi-Wan male Stewjon 57BBY yes #&gt; 6 Han male Corellia 29BBY no #&gt; 7 Palpatine male Naboo 82BBY no #&gt; 8 R2-D2 unknown Naboo 33BBY no We use the function toJSON() to convert the data frame swdf into a JSON object: # convert R data.frame to JSON sw_json = toJSON(swdf) # what class? class(sw_json) #&gt; [1] &quot;json&quot; # display JSON format sw_json #&gt; [{&quot;Name&quot;:&quot;Anakin&quot;,&quot;Gender&quot;:&quot;male&quot;,&quot;Homeworld&quot;:&quot;Tatooine&quot;,&quot;Born&quot;:&quot;41.9BBY&quot;,&quot;Jedi&quot;:&quot;yes&quot;},{&quot;Name&quot;:&quot;Amidala&quot;,&quot;Gender&quot;:&quot;female&quot;,&quot;Homeworld&quot;:&quot;Naboo&quot;,&quot;Born&quot;:&quot;46BBY&quot;,&quot;Jedi&quot;:&quot;no&quot;},{&quot;Name&quot;:&quot;Luke&quot;,&quot;Gender&quot;:&quot;male&quot;,&quot;Homeworld&quot;:&quot;Tatooine&quot;,&quot;Born&quot;:&quot;19BBY&quot;,&quot;Jedi&quot;:&quot;yes&quot;},{&quot;Name&quot;:&quot;Leia&quot;,&quot;Gender&quot;:&quot;female&quot;,&quot;Homeworld&quot;:&quot;Alderaan&quot;,&quot;Born&quot;:&quot;19BBY&quot;,&quot;Jedi&quot;:&quot;no&quot;}] &quot;{\\&quot;Name\\&quot;:[\\&quot;Anakin\\&quot;,\\&quot;Amidala\\&quot;,\\&quot;Luke\\&quot;,\\&quot;Leia\\&quot;,\\&quot;Obi-Wan\\&quot;,\\&quot;Han\\&quot;, \\&quot;Palpatine\\&quot;,\\&quot;R2-D2\\&quot;],\\&quot;Gender\\&quot;:[\\&quot;male\\&quot;,\\&quot;female\\&quot;,\\&quot;male\\&quot;,\\&quot;female\\&quot;, \\&quot;male\\&quot;,\\&quot;male\\&quot;,\\&quot;male\\&quot;,\\&quot;unknown\\&quot;],\\&quot;Homeworld\\&quot;:[\\&quot;Tatooine\\&quot;,\\&quot;Naboo\\&quot;, \\&quot;Tatooine\\&quot;,\\&quot;Alderaan\\&quot;,\\&quot;Stewjon\\&quot;,\\&quot;Corellia\\&quot;,\\&quot;Naboo\\&quot;,\\&quot;Naboo\\&quot;], \\&quot;Born\\&quot;:[\\&quot;41.9BBY\\&quot;,\\&quot;46BBY\\&quot;,\\&quot;19BBY\\&quot;,\\&quot;19BBY\\&quot;,\\&quot;57BBY\\&quot;,\\&quot;29BBY\\&quot;, \\&quot;82BBY\\&quot;,\\&quot;33BBY\\&quot;],\\&quot;Jedi\\&quot;:[\\&quot;yes\\&quot;,\\&quot;no\\&quot;,\\&quot;yes\\&quot;,\\&quot;no\\&quot;,\\&quot;yes\\&quot;,\\&quot;no\\&quot;, \\&quot;no\\&quot;,\\&quot;no\\&quot;]}&quot; We can go from a JSON format to an R list # convert JSON string to R list sw_R = fromJSON(sw_json) # what class? class(sw_R) #&gt; [1] &quot;data.frame&quot; # display JSON format sw_R #&gt; Name Gender Homeworld Born Jedi #&gt; 1 Anakin male Tatooine 41.9BBY yes #&gt; 2 Amidala female Naboo 46BBY no #&gt; 3 Luke male Tatooine 19BBY yes #&gt; 4 Leia female Alderaan 19BBY no 42.3.1 Reading JSON Data How do we read JSON data from the Web? We read JSON data in several ways. One way is to pass the url directly to fromJSON(). Another way is by passing fromJSON() the name of the file with the JSON content as a single string. We’ll read the miserables dataset from: http://mbostock.github.io/protovis/ex/miserables.js INSERT SCREENSHOT of miserables The data is in a file that contains several javascript comments and some other javascript notation. Unfortunately, we cannot use any of the fromJSON() functions directly on this type of content. Instead, we need to read the content as text, get rid of the comments, and change some characters before using fromJSON() # url with JSON content miser &lt;- &quot;http://mbostock.github.io/protovis/ex/miserables.js&quot; # import content as text (character vector) miserables &lt;- readLines(miser) # eliminate first 11 lines (containing comments) miserables &lt;- miserables[-c(1:11)] Now check the first and the last lines: # first line miserables[1] #&gt; [1] &quot;var miserables = {&quot; # last line miserables[length(miserables)] #&gt; [1] &quot;};&quot; We need to modify the first and last lines so they don’t contain non-JSON javascript notation # open curly bracket in first line miserables[1] &lt;- &quot;{&quot; # closing curly bracket in last line miserables[length(miserables)] &lt;- &quot;}&quot; Now we must concatenate all the content into a single string: # JSON content in one single string miserables_str &lt;- paste(miserables, collapse = &quot;&quot;) Once we have the JSON content in the proper shape, we can parse it with fromJSON(). ### # THIS GIVES AN ERROR! ### # fromJSON() in package RJSONIO mis1 = rjson::fromJSON(miserables_str) # class class(mis1) # how many elements length(mis1) # names names(mis1) "]
]
