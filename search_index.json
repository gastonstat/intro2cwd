[
["json.html", "41 JSON Data 41.1 JSON Basics 41.2 Understanding JSON Syntax 41.3 JSON R packages", " 41 JSON Data The goal of this chapter is to provide an introduction for handling JSON data in R. We’ll cover the following topics: JSON Basics R packages for JSON data Reading JSON data from the Web 41.1 JSON Basics JSON stands for JavaScript Object Notation and it is a format for representing data. More formally, we can say that it is a text-based way to store and transmit structured data. By using a simple syntax, you can easily store anything from a single number to strings, JSON-arrays, and JSON-objects using nothing but a string of plain text. As you will see, you can also nest arrays and objects, allowing you to create complex data structures. Let’s first talk about what JSON is and why is important. JSON is a data representation format very similar to XML. It’s used widely across the internet for almost every single API that you will access as well as for config files and things such as games and text editors. Its popularity is based on a handful of attractive aspects: It’s extremely lightweight and compact to send back and forth due to the small size file; It’s easy for both computers and people to read (and write) compared to something like XML since it’s much cleaner and there’s not as many opening and closing tags; It maps very easily onto the data structures used by most programming languages (numbers, strings, booleans, nulls, arrays and associative arrays); It also integrates very nicely with javascript since JSON is just a superset of javascript which means anything you write in JSON is valid javascript, which is a language used all throughout the web for front-end or back-end of applications. Also, every single major language has some form of library or packages with built-in functionality to parse JSON strings into objects or classes in that language which makes working with JSON data extremely easy inside of a programming language. Why should we care about JSON? When working with data from the Web, we’ll inevitably find some JSON data because it is commonly used in web applications to send data from the server to the browser. As a matter of fact, in your data science career you will be using JSON quite often, whether it is consuming an API, creating an API, or creating config files for you or other people to use for your application. 41.2 Understanding JSON Syntax Let’s now talk about the syntax used in JSON. 41.2.1 Data Types The first thing to talk about is the data types or values that JSON can represent. As we know, JSON is a data representation format, so we need to be able to represent certain data types within it. JSON supports the following types: string (in double quotes) number (in any format whether they’re decimal numbers, integers, negative numbers, even numbers in scientific notation) true and false (booleans) null 41.2.2 Arrays JSON also supports arrays (in JSON Sense) which are sets of data types defined within brackets, and contains a comma-separated list of values. For example [1, 2, 2] or [\"computing\", \"with\", \"data\"], which can be a set of any of the data types listed above. We typically use arrays when we have a set of unnamed values, this is why some people refer to them as ordered unnamed arrays. The closest R object to a JSON array would be a vector: JSON: [1, 2, 3, ... ]; -vs- R: c(1, 2, 3, ...) JSON: [true, true, false, ... ]; -vs- R: c(TRUE, TRUE, FALSE, ...) 41.2.3 Objects Another type of data container is the so-called JSON object, which is the most complex but also the most used type of object within JSON, and it allows you to represent values that are key-value pairs: {\"key\": \"value\"} You use curly braces to define a JSON-object, and inside the braces you put key-value pairs. The key must be surrounded by double quotes, followed by a colon, followed by the value. The value can be a single data type, but it can also be a JSON-array (which in turn can contain a JSON-object). For example, say the key is \"year\" and the value 2000, then a simple JSON object will look like this: {\"year\": 2000} Another example can be a key \"name\" and a value \"Jessica\": {\"name\": \"Jessica\"} If you have multiple key-value pairs, you separate each of them with a comma: { &quot;name1&quot;: &quot;Nicole&quot;, &quot;name2&quot;: &quot;Pleuni&quot;, &quot;name3&quot;: &quot;Rori&quot; } A more complex object might look lokie this: { &quot;person1&quot;: [ { &quot;first&quot;: &quot;Nicole&quot;, &quot;last&quot;: &quot;Adelstein&quot; } ], &quot;person2&quot;: [ { &quot;first&quot;: &quot;Pleuni&quot;, &quot;last&quot;: &quot;Pennings&quot; } ], &quot;person3&quot;: [ { &quot;first&quot;: &quot;Rori&quot;, &quot;last&quot;: &quot;Rohlfs&quot; } ] } Because the data inside a JSON object is formed of key-value pairs, you could think of them as named arrays. What do JSON-objects correspond to in R? Well, there’s not really a unique correspondence between a JSON-object and its equivalent in R. For instance, we could use a named vector to store the same data in the JSON-object previously displayed: # named vector in R c(&quot;name1&quot; = &quot;Nicole&quot;, &quot;name2&quot; = &quot;Pleuni&quot;, &quot;name3&quot; = &quot;Rori&quot;) Or we could also use a list: # named list in R list(&quot;name1&quot; = &quot;Nicole&quot;, &quot;name2&quot; = &quot;Pleuni&quot;, &quot;name3&quot; = &quot;Rori&quot;) However, JSON-objects can be more complex than this basic example. Perhaps the similar container in R is a list. 41.2.4 Examples of JSON Data Containers Here’s a series of examples involving combinations of JSON arrays and objects. JSON containers can be nested. Here’s one example: { &quot;name&quot;: [&quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;], &quot;grams&quot;: [300, 200, 500], &quot;qty&quot;: [4, 5, null], &quot;new&quot;: [true, false, true] } Here’s another example of nested containers: [ { &quot;name&quot;: &quot;X&quot;, &quot;grams&quot;: 300, &quot;qty&quot;: 4, &quot;new&quot;: true }, { &quot;name&quot;: &quot;Y&quot;, &quot;grams&quot;: 200, &quot;qty&quot;: 5, &quot;new&quot;: false }, { &quot;name&quot;: &quot;Z&quot;, &quot;grams&quot;: 500, &quot;qty&quot;: null, &quot;new&quot;: true} ] 41.2.5 Data Table Toy Example Let’s consider a less basic example Name Gender Homeland Born Jedi Anakin male Tatooine 41.9BBY yes Amidala female Naboo 46BBY no Luke male Tatooine 19BBY yes Leia female Alderaan 19BBY no Obi-Wan male Stewjon 57BBY yes Han male Corellia 29BBY no Palpatine male Naboo 82BBY no R2-D2 unknown Naboo 33BBY no There are several ways to represent this data in JSON format. One option could be an array that contains objects. Each object represents an individual [ { &quot;Name&quot;: &quot;Anakin&quot;, &quot;Gender&quot;: &quot;male&quot;, &quot;Homeworld&quot;: &quot;Tatooine&quot;, &quot;Born&quot;: &quot;41.9BBY&quot;, &quot;Jedi&quot;: &quot;yes&quot; }, { &quot;Name&quot;: &quot;Amidala&quot;, &quot;Gender&quot;: &quot;female&quot;, &quot;Homeworld&quot;: &quot;Naboo&quot;, &quot;Born&quot;: 46BBY&quot;, &quot;Jedi&quot;: &quot;no&quot; }, ... { &quot;Name&quot;: &quot;R2-D2&quot;, &quot;Gender&quot;: &quot;unknown&quot;, &quot;Homeworld&quot;: &quot;Naboo&quot;, &quot;Born&quot;: &quot;33BBY&quot;, &quot;Jedi&quot;: &quot;no&quot; } ] Another way to represent the data in the table above is by using an object containing key-value pairs in which the keys are the names of the columns, and the pairs are arrays (the data values in each column). { &quot;Name&quot;: [ &quot;Anakin&quot;, &quot;Amidala&quot;, &quot;Luke&quot;, ... , &quot;R2-D2&quot; ], &quot;Gender&quot;: [ &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, ... , &quot;unknown&quot; ], &quot;Homeworld&quot;: [ &quot;Tatooine&quot;, &quot;Naboo&quot;, &quot;Tatooine&quot;, ... , &quot;Naboo&quot; ], &quot;Born&quot;: [ &quot;41.9BBY&quot;, &quot;46BBY&quot;, &quot;19BBY&quot;, ... , &quot;33BBY&quot; ], &quot;Jedi&quot;: [ &quot;yes&quot;, &quot;no&quot;, &quot;yes&quot;, ... , &quot;no&quot; ] } 41.3 JSON R packages R has 3 packages for working with JSON data \"RJSONIO\" by Duncan Temple Lang \"rjson\" by Alex Couture-Beil \"jsonlite\" by Jeroen Ooms, Duncan Temple Lang, Jonathan Wallace All packages provide 2 main functions, toJSON() and fromJSON(), that allow conversion to and from data in JSON format, respectively. We’ll focus on the functions from \"jsonlite\". There are 2 primary functions in \"jsonlite\": toJSON() converts an R object to a string in JSON fromJSON() converts JSON content to R objects 41.3.1 Function toJSON() The function jsonlite::toJSON() converts an R object to a string in JSON. Example: single number to JSON-array Let’s begin with a super simple example by passing a single data value to the function toJSON(): toJSON(pi, digits = 4) #&gt; [3.1416] Example: vectors to JSON-arrays Consider the following vectors num &lt;- c(1, 2, 3, 4, 5) lts &lt;- c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;) Applying toJSON() to the vectors num, lts, and both produces JSON arrays: toJSON(num) #&gt; [1,2,3,4,5] toJSON(lts) #&gt; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;] The argument pretty = TRUE allows you to obtain a JSON string with added indentation whitespace: toJSON(num, pretty = TRUE) #&gt; [1, 2, 3, 4, 5] toJSON(lts, pretty = TRUE) #&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;] What about an R vector with named elements? For example, here’s a vector vec vec &lt;- num names(vec) &lt;- lts vec #&gt; a b c d e #&gt; 1 2 3 4 5 Converting vec to JSON, we get: toJSON(vec) #&gt; [1,2,3,4,5] As you can tell, the names of the elements in vec are lost in translation. Example: matrix to JSON-array Here’s another example from an matrix to a JSON array: mat &lt;- matrix(9:1, nrow = 3, ncol = 3) mat #&gt; [,1] [,2] [,3] #&gt; [1,] 9 6 3 #&gt; [2,] 8 5 2 #&gt; [3,] 7 4 1 toJSON() converts an R matrix into a JSON-array toJSON(mat) #&gt; [[9,6,3],[8,5,2],[7,4,1]] Notice that the array output arranges the values of the matrix row-by-row, also referred to as row-major. This means that when the input is an R matrix, toJSON() uses its argument matrix = \"rowmajor\". You can change the arrangemnt to column-major by specifying the argument matrix = \"columnmajor\": toJSON(mat, matrix = &quot;columnmajor&quot;) #&gt; [[9,8,7],[6,5,4],[3,2,1]] Example: data frame to JSON-object We can also use toJSON() on data frames. Here’s an example of an assembled data frame swdf which will be converted to a JSON-object: # toy data sw_data &lt;- rbind( c(&quot;Anakin&quot;, &quot;male&quot;, &quot;Tatooine&quot;, &quot;41.9BBY&quot;, &quot;yes&quot;), c(&quot;Amidala&quot;, &quot;female&quot;, &quot;Naboo&quot;, &quot;46BBY&quot;, &quot;no&quot;), c(&quot;Luke&quot;, &quot;male&quot;, &quot;Tatooine&quot;, &quot;19BBY&quot;, &quot;yes&quot;), c(&quot;Leia&quot;, &quot;female&quot;, &quot;Alderaan&quot;, &quot;19BBY&quot;, &quot;no&quot;) ) # convert to data.frame and add column names swdf &lt;- data.frame(sw_data, stringsAsFactors = FALSE) names(swdf) &lt;- c(&quot;Name&quot;, &quot;Gender&quot;, &quot;Homeworld&quot;, &quot;Born&quot;, &quot;Jedi&quot;) swdf #&gt; Name Gender Homeworld Born Jedi #&gt; 1 Anakin male Tatooine 41.9BBY yes #&gt; 2 Amidala female Naboo 46BBY no #&gt; 3 Luke male Tatooine 19BBY yes #&gt; 4 Leia female Alderaan 19BBY no The feault output when you pass a data frame to jsonlite::toJSON() is # convert R data.frame to JSON sw_json = toJSON(swdf) sw_json #&gt; [{&quot;Name&quot;:&quot;Anakin&quot;,&quot;Gender&quot;:&quot;male&quot;,&quot;Homeworld&quot;:&quot;Tatooine&quot;,&quot;Born&quot;:&quot;41.9BBY&quot;,&quot;Jedi&quot;:&quot;yes&quot;},{&quot;Name&quot;:&quot;Amidala&quot;,&quot;Gender&quot;:&quot;female&quot;,&quot;Homeworld&quot;:&quot;Naboo&quot;,&quot;Born&quot;:&quot;46BBY&quot;,&quot;Jedi&quot;:&quot;no&quot;},{&quot;Name&quot;:&quot;Luke&quot;,&quot;Gender&quot;:&quot;male&quot;,&quot;Homeworld&quot;:&quot;Tatooine&quot;,&quot;Born&quot;:&quot;19BBY&quot;,&quot;Jedi&quot;:&quot;yes&quot;},{&quot;Name&quot;:&quot;Leia&quot;,&quot;Gender&quot;:&quot;female&quot;,&quot;Homeworld&quot;:&quot;Alderaan&quot;,&quot;Born&quot;:&quot;19BBY&quot;,&quot;Jedi&quot;:&quot;no&quot;}] The argument dataframe gives you more control on the output. This argument has three options: \"rows\": each row is converted to a JSON-object with key-value pairs formed by \"column_name\": \"row_value\"; toJSON(swdf, dataframe = &quot;rows&quot;) #&gt; [{&quot;Name&quot;:&quot;Anakin&quot;,&quot;Gender&quot;:&quot;male&quot;,&quot;Homeworld&quot;:&quot;Tatooine&quot;,&quot;Born&quot;:&quot;41.9BBY&quot;,&quot;Jedi&quot;:&quot;yes&quot;},{&quot;Name&quot;:&quot;Amidala&quot;,&quot;Gender&quot;:&quot;female&quot;,&quot;Homeworld&quot;:&quot;Naboo&quot;,&quot;Born&quot;:&quot;46BBY&quot;,&quot;Jedi&quot;:&quot;no&quot;},{&quot;Name&quot;:&quot;Luke&quot;,&quot;Gender&quot;:&quot;male&quot;,&quot;Homeworld&quot;:&quot;Tatooine&quot;,&quot;Born&quot;:&quot;19BBY&quot;,&quot;Jedi&quot;:&quot;yes&quot;},{&quot;Name&quot;:&quot;Leia&quot;,&quot;Gender&quot;:&quot;female&quot;,&quot;Homeworld&quot;:&quot;Alderaan&quot;,&quot;Born&quot;:&quot;19BBY&quot;,&quot;Jedi&quot;:&quot;no&quot;}] \"columns\": each column is converted into a JSON-object with a single key for each column, and values stored as arrays; toJSON(swdf, dataframe = &quot;columns&quot;) #&gt; {&quot;Name&quot;:[&quot;Anakin&quot;,&quot;Amidala&quot;,&quot;Luke&quot;,&quot;Leia&quot;],&quot;Gender&quot;:[&quot;male&quot;,&quot;female&quot;,&quot;male&quot;,&quot;female&quot;],&quot;Homeworld&quot;:[&quot;Tatooine&quot;,&quot;Naboo&quot;,&quot;Tatooine&quot;,&quot;Alderaan&quot;],&quot;Born&quot;:[&quot;41.9BBY&quot;,&quot;46BBY&quot;,&quot;19BBY&quot;,&quot;19BBY&quot;],&quot;Jedi&quot;:[&quot;yes&quot;,&quot;no&quot;,&quot;yes&quot;,&quot;no&quot;]} \"values\": the values in each column are converted to a JSON-array, and the names of the columns are lost. toJSON(swdf, dataframe = &quot;values&quot;) #&gt; [[&quot;Anakin&quot;,&quot;male&quot;,&quot;Tatooine&quot;,&quot;41.9BBY&quot;,&quot;yes&quot;],[&quot;Amidala&quot;,&quot;female&quot;,&quot;Naboo&quot;,&quot;46BBY&quot;,&quot;no&quot;],[&quot;Luke&quot;,&quot;male&quot;,&quot;Tatooine&quot;,&quot;19BBY&quot;,&quot;yes&quot;],[&quot;Leia&quot;,&quot;female&quot;,&quot;Alderaan&quot;,&quot;19BBY&quot;,&quot;no&quot;]] 41.3.2 Function fromJSON() In practice, instead of converting R objects to JSON objects, it is more common to have data in JSON format which needs to be converted into an R object. The function jsonlite::fromJSON() converts a JSON-object to an R object. 41.3.3 Example: JSON-array to R vector json_array &lt;- &#39;[&quot;computing&quot;, &quot;with&quot;, &quot;data&quot;]&#39; fromJSON(json_array) #&gt; [1] &quot;computing&quot; &quot;with&quot; &quot;data&quot; 41.3.4 Example: JSON-object to R object Consider a simple JSON-object, and its conversion to R with jsonlite::fromJSON() json_obj1 &lt;- &#39;{&quot;name&quot;: &quot;Jessica&quot;}&#39; fromJSON(json_obj1) #&gt; $name #&gt; [1] &quot;Jessica&quot; Notice that the obtained object is an R list in which the key becomes the name of the list, and the value becomes the content of the list’s element. Consider a less simple JSON-object: json_obj2 &lt;- &#39;{&quot;name1&quot;: &quot;Nicole&quot;, &quot;name2&quot;: &quot;Pleuni&quot;, &quot;name3&quot;: &quot;Rori&quot;}&#39; fromJSON(json_obj2) #&gt; $name1 #&gt; [1] &quot;Nicole&quot; #&gt; #&gt; $name2 #&gt; [1] &quot;Pleuni&quot; #&gt; #&gt; $name3 #&gt; [1] &quot;Rori&quot; Another example: fromJSON(&#39;{&quot;name&quot;: [&quot;X&quot;, &quot;Y&quot;], &quot;grams&quot;: [30, 20], &quot;qty&quot;: [4, null], &quot;new&quot;: [true, false]}&#39;) #&gt; $name #&gt; [1] &quot;X&quot; &quot;Y&quot; #&gt; #&gt; $grams #&gt; [1] 30 20 #&gt; #&gt; $qty #&gt; [1] 4 NA #&gt; #&gt; $new #&gt; [1] TRUE FALSE 41.3.5 Example: JSON-object to R object Suppose you have a JSON object with the following data: { &quot;Name&quot;: [&quot;Anakin&quot;,&quot;Amidala&quot;,&quot;Luke&quot;,&quot;Leia&quot;], &quot;Gender&quot;: [&quot;male&quot;,&quot;female&quot;,&quot;male&quot;,&quot;female&quot;], &quot;Homeworld&quot;: [&quot;Tatooine&quot;,&quot;Naboo&quot;,&quot;Tatooine&quot;,&quot;Alderaan&quot;], &quot;Born&quot;: [&quot;41.9BBY&quot;,&quot;46BBY&quot;,&quot;19BBY&quot;,&quot;19BBY&quot;], &quot;Jedi&quot;: [&quot;yes&quot;,&quot;no&quot;,&quot;yes&quot;,&quot;no&quot;] } and assume that the above data is stored as a single (continuous) string in an R character vector json_sw; applying fromJSON() to this string gives you the following list: fromJSON(json_sw) #&gt; $Name #&gt; [1] &quot;Anakin&quot; &quot;Amidala&quot; &quot;Luke&quot; &quot;Leia&quot; #&gt; #&gt; $Gender #&gt; [1] &quot;male&quot; &quot;female&quot; &quot;male&quot; &quot;female&quot; #&gt; #&gt; $Homeworld #&gt; [1] &quot;Tatooine&quot; &quot;Naboo&quot; &quot;Tatooine&quot; &quot;Alderaan&quot; #&gt; #&gt; $Born #&gt; [1] &quot;41.9BBY&quot; &quot;46BBY&quot; &quot;19BBY&quot; &quot;19BBY&quot; #&gt; #&gt; $Jedi #&gt; [1] &quot;yes&quot; &quot;no&quot; &quot;yes&quot; &quot;no&quot; Can this be transformed into a data frame? Yes, by passing the obtained list to the function data.frame(): data.frame(fromJSON(json_sw)) #&gt; Name Gender Homeworld Born Jedi #&gt; 1 Anakin male Tatooine 41.9BBY yes #&gt; 2 Amidala female Naboo 46BBY no #&gt; 3 Luke male Tatooine 19BBY yes #&gt; 4 Leia female Alderaan 19BBY no 41.3.6 Reading JSON Data How do we read JSON data from the Web? We read JSON data in several ways. One way is to pass the url directly to fromJSON(). Another way is by passing fromJSON() the name of the file with the JSON content as a single string. Heer’s an example reading a JSON string from the website Advice Slip. The url https://api.adviceslip.com/advice gives you a random advice (see figure below): Figure 41.1: Random advice from Advice Slip As you can tell, the content is a simple JSON string advice_url &lt;- &quot;https://api.adviceslip.com/advice&quot; fromJSON(advice_url) #&gt; $slip #&gt; $slip$id #&gt; [1] 9 #&gt; #&gt; $slip$advice #&gt; [1] &quot;True happiness always resides in the quest!&quot; Example: Colors in Hexadecimal Notation The following data from on of Dave Eddy’s github repositories: https://raw.githubusercontent.com/bahamas10/css-color-names/master/css-color-names.json { &quot;aliceblue&quot;: &quot;#f0f8ff&quot;, &quot;antiquewhite&quot;: &quot;#faebd7&quot;, &quot;aqua&quot;: &quot;#00ffff&quot;, &quot;aquamarine&quot;: &quot;#7fffd4&quot;, &quot;azure&quot;: &quot;#f0ffff&quot;, &quot;beige&quot;: &quot;#f5f5dc&quot;, &quot;bisque&quot;: &quot;#ffe4c4&quot;, &quot;black&quot;: &quot;#000000&quot;, ... We pass the url to jsonlite::fromJSON() colors_json &lt;- &quot;https://raw.githubusercontent.com/bahamas10/css-color-names/master/css-color-names.json&quot; hex_colors &lt;- fromJSON(colors_json) The output in hex_colors is a list with 148 elements; the first five elements are displayed below: hex_colors[1:5] #&gt; $aliceblue #&gt; [1] &quot;#f0f8ff&quot; #&gt; #&gt; $antiquewhite #&gt; [1] &quot;#faebd7&quot; #&gt; #&gt; $aqua #&gt; [1] &quot;#00ffff&quot; #&gt; #&gt; $aquamarine #&gt; [1] &quot;#7fffd4&quot; #&gt; #&gt; $azure #&gt; [1] &quot;#f0ffff&quot; "]
]
