[
["pubmed.html", "45 Searching PubMed 45.1 PubMed 45.2 Basics of E-utilities", " 45 Searching PubMed In this chapter, we provide an example of web data collection from the database PubMed, using the Entrez Programming Utilities, commonly referred to as E-utilities, from the National Center for Biotechnology Information (NCBI). You will need the following packages: library(stringr) # for strings and regular expressions library(xml2) # for parsing data in XML (e.g. HTML) library(rvest) # for scraping XML and HTML content 45.1 PubMed PubMed (https://www.pubmed.gov) is a database of the largest collection of citations to medical journal literature in the world, and it is one of 38 databases built and maintained by the NCBI. Scientists, researchers, and users around the world use PubMed to search and retrieve bibliographic data, choose from several display formats, and share their results. Keep in mind that when people talk about PubMed, they could be referring to both the search interface and to the database itself. PubMed’s website provides a search engine to obtain bibliographic information: Figure 45.1: Partial screenshot of PubMed’s homepage The simplest use of PubMed’s search engine is to provide a query, very similar to the queries that you would provide to google’s search engine. For example, we may be interested in looking for articles and other publications associated with some of the effects that exposure to Bisphenol A (BPA) has on reproductive health. Therefore, we can type in BPA exposure reproductive health inside the search box, and obtain some results (like those displayed in the screenshot below). Figure 45.2: PubMed search example As of this writing (Fall 2020), there are 359 results that match the query term, with publications ranging from 1999 to end-of-2020. Notice that the webpage has a sidebar with checkboxes, and other intereactive options, that allow you to filter results by year of publication, by searching for the query in the abstract, or just in the titles, and things like that. As an example, we can move the slider for the year of publication to retrieve results that were published in 2018 and 2019 (see screenshot below) Figure 45.3: PubMed search example (cont’d) If the obtained results are what you were looking for, you also have the option to download a CSV file with such results (download button in the navigation bar, above the barchart of years of publication). In addition, you can perform a more advanced search by clicking on the “Advanced” button displayed below the search box. Clicking on this option will take you to a new page with more query boxes and a long list of query fields (screenshot below). Figure 45.4: PubMed search example (cont’d) In the Advanced search mode, you can find a large list of fields that give you the opportunity to specify a more detailed query. For example, you can be more specific in your search by looking for results based on title, or based on author(s) information, or by date of publication, etc. This way of interacting with PubMed (and similar databases) is how most users and researchers utilize PubMed: performing manual searches through their browsers, obtaining the results on their screens, and deciding which publications are worth further inspection. Sometimes, however, you: may have a question that cannot be answered easily when you search PubMed may need to see every citation in PubMed in a certain field. may need to run a search in PubMed and get the output in a CSV file that includes more (or different) data elements than the standard CSV file. may need to run specialized queries that might serve a very specific research need. This is where E-utilities comes very handy and you can get the data that you need, and only the data that you need, in the format that you need. E-utilities is a great solution when you: can’t find a good way to ask your question using the PubMed search box. can search PubMed, but you’d like more, or less, or different data returned from the records. want more control over the format of your PubMed data. E-utilities is simply another way to search PubMed and the other NCBI databases. E-utilities is an API, or Application Programming Interface: a set of rules, protocols, and tools for building software and applications. This means that you control exactly what fields you are searching, the specific data elements you retrieve, the format of the data, and how you share your results. When you use E-utilities to access PubMed, you are accessing the same data that you would find at https://www.pubmed.gov. 45.2 Basics of E-utilities E-utilities is the short name for the Entrez Programming Utilities, which is simply another way to search PubMed and the other NCBI databases. According to the website: “Entrez Programming Utilities (E-utilities) are a set of eight server-side programs that provide a stable interface into the Entrez query and database system at the National Center for Biotechnology Information (NCBI).” What does this mean? E-utilities is basically an Application Programming Interface (API). The E-utilities API allows you to search PubMed and any other NCBI database through your own program: e.g. R, Python, etc. When you use E-utilities to access PubMed, you are accessing the same data that you’d find at www.pubmed.gov. Note: the results returned by E-utilities queries of PubMed may differ slightly from those returned in the web version of PubMed. As of this writing (Fall 2020) a new PubMed API is currently under development. Official Documentation: https://www.ncbi.nlm.nih.gov/books/NBK25501/ The documentation is written and maintained by Eric Sayers. The Nine E-utilities The name E-utilities comes from the nine utilities (or programs) EInfo (database statistics): Provides the number of records indexed in each field of a given database, the date of the last update of the database, and the available links from the database to other Entrez databases. ESearch (database statistics): Responds to a text query with the list of matching UIDs in a given database (for later use in ESummary, EFetch or ELink), along with the term translations of the query. EPost (UID uploads): Accepts a list of UIDs from a given database, stores the set on the History Server, and responds with a query key and web environment for the uploaded dataset. ESummary (document summary downloads): Responds to a list of UIDs from a given database with the corresponding document summaries. EFetch (data record downloads): Responds to a list of UIDs in a given database with the corresponding data records in a specified format. ELink (Entrez links): Responds to a list of UIDs in a given database with either a list of related UIDs (and relevancy scores) in the same database or a list of linked UIDs in another Entrez database EGQuery (global query): Responds to a text query with the number of records matching the query in each Entrez database. ESpell (spelling suggestions): Retrieves spelling suggestions for a text query in a given database. ECitMatch (batch citation searching in PubMed): Retrieves PubMed IDs (PMIDs) corresponding to a set of input citation strings. For illustration purposes, we will only focus on ESearch, ESummary, and EFetch. 45.2.1 How does E-utilities work? The E-utilities use a fixed URL syntax that translates a standard set of input parameters into the values necessary for various NCBI software components to search for and retrieve the requested data. The E-utilities are therefore the structured interface to the Entrez system, which currently includes 38 databases covering a variety of biomedical data, including nucleotide and protein sequences, gene records, three-dimensional molecular structures, and the biomedical literature. Base URL: All E-utility requests should be made to URLs beginning with the following string: https://eutils.ncbi.nlm.nih.gov/entrez/eutils/ These URLs direct requests to servers that are used only by the E-utilities and that are optimized to give users the best performance. “In order not to overload the E-utility servers, NCBI recommends that users post no more than three URL requests per second and limit large jobs to either weekends or between 9:00 PM and 5:00 AM Eastern time during weekdays.” You can obtain an API Key offering you enhanced levels of supported access to the E-utilities. This is totally optional but worth knowing. In our examples, we won’t need an API, but if you plan to use PubMed more intensively then consider getting an API Key. 45.2.1.1 API Requests To make requests, you have to assemble a URL. Each URL consists of three parts: The base URL: This is the address of the E-utilities server. Every URL begins with https://eutils.ncbi.nlm.nih.gov/entrez/eutils/ A utility name: This is the name of the specific tool that you are using. There are nine E-utilities and each one performs a specific function: ESearch: Search a text query in a single database and retrieve the list of matching unique identifiers (UIDs). In PubMed, ESearch retrieves a list of PMIDs. esearch.fcgi? ESummary: Retrieve document summaries for each UID. esummary.fcgi? EFetch: Retrieve full records for each UID. efetch.fcgi? EPost: Upload a list of UIDs for later use. epost.fcgi? ELink: Retrieve UIDs for related or linked records, or LinkOut URLs. elink.fcgi? EInfo: Retrieve information and statistics about a single database. einfo.fcgi? ESpell: Retrieve spelling suggestions for a text query. espell.fcgi? ECitMatch: Search PubMed for a series of citation strings. ecitmatch.fcgi? EGQuery: Search a text query in all databases and return the number of results for the query in each database. egquery.fcgi? The file extension .fcgi? stands for Fast Common Gateway Interface. The parameters: These are the details of your query. Common parameters include the name of the database, your search terms, the number of results you’d like to get, and the format. The parameters that are available will change depending on the utility. Searching PubMed with ESearch When you put these three parts together, you will have a URL that looks something like this: https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&amp;term=reproductive+AND+health The above url uses the ESearch utility (esearch.fcgi?) and uses two query parameters, namely db and term. https://eutils.ncbi.nlm.nih.gov/entrez/eutils/ is the base URL esearch.fcgi? indicates the E-utility (EFectch in this case) db=pubmed: indicates that the searched database is PubMed. term=reproductive+AND+health: indicates that the searched involves the term reproductive health. notice the use of &amp; to include a new query parameter By default, the information is retrieved in XML format (see screenshot below). If you scroll through the XML you’ll see the number of records retrieved along with a list of PMIDs for those records. Figure 45.5: List of PubMed IDs in XML format Retrieving records with EFetch The ESearch URL retrieves a list of PMIDs—not full records. To get the full records you need to use EFetch, and the URL would look something like this: https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&amp;id=33073741,33073726&amp;retmode=abstract&amp;rettype=text https://eutils.ncbi.nlm.nih.gov/entrez/eutils/ is the base URL efetch.fcgi? indicates the E-utility (EFectch in this case) db=pubmed: indicates that the searched database is PubMed. id=33073741,33073726: includes the PMIDs of the records. retmode=abstract: indicates theabstract` as the return mode. rettype=text: determines thetext` as the return type format. Figure 45.6: Return type in text format for abstract of specified IDs Retrieving summaries with ESummary The ESummary URL allows you to get the document summaries of the associated l list of PMIDs, and the URL would look something like this: https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=pubmed&amp;id=33073741,33073726 https://eutils.ncbi.nlm.nih.gov/entrez/eutils/ is the base URL esummary.fcgi? indicates the E-utility (ESummary in this case) db=pubmed: indicates that the searched database is PubMed. id=33073741,33073726: includes the PMIDs of the records. The output of ESummary is a series of XML \"DocSums\" (Document Summaries), the format of which depends on the database. Below is an example DocSum for PubMed ID 33073741. Figure 45.7: Summary in XML format for specified IDs 45.2.2 Searching PubMed from within R Now that you have a basic understanding of PubMed, and the E-Utilities programs, let’s see how to make requests from R. We are going to consider a typical pipeline that involves three steps: using esearch to get a list of document IDs parsing the IDs pass the list of IDs to either EFetch or ESummary # base URL, and paths of associated e-utilities entrez_url &lt;- &quot;https://eutils.ncbi.nlm.nih.gov/entrez/eutils/&quot; esearch &lt;- &quot;esearch.fcgi?&quot; efetch &lt;- &quot;efetch.fcgi?&quot; esummary &lt;- &quot;esummary.fcgi?&quot; Suppose we are interested in performing a search with the following paramters: searching for the term BPA exposure reproductive health; limiting our search to documents between 2018 and 2019 retaining at most the firsst 100 results We can assemble an R string params_esearch with all these parameters: # Retrieving IDs with ESearch params_esearch &lt;- paste0( c(&quot;db=pubmed&quot;, &quot;term=BPA+exposure+reproductive+health&quot;, &quot;mindate=2018&quot;, &quot;maxdate=2019&quot;, &quot;retmax=100&quot;), collapse = &quot;&amp;&quot;) params_esearch #&gt; [1] &quot;db=pubmed&amp;term=BPA+exposure+reproductive+health&amp;mindate=2018&amp;maxdate=2019&amp;retmax=100&quot; With the base URL, the esearch utility, and the parameters, we assemble the required URL that we can pass to read_xml(), and then use html_nodes() and html_text() to extract the list of documents IDs: # assemble an esearch URL ids_query &lt;- paste0(entrez_url, esearch, params_esearch) ids_xml &lt;- read_xml(ids_query) # extract Ids (PMIDs) ids &lt;- html_text(html_nodes(ids_xml, xpath = &quot;//Id&quot;)) The vector ids contains 94 retrieved document IDs, the first 5 and the last 5 five displayed below: head(ids, 5) #&gt; [1] &quot;31771501&quot; &quot;31697385&quot; &quot;31683046&quot; &quot;31658598&quot; &quot;31648075&quot; tail(ids, 5) #&gt; [1] &quot;29549734&quot; &quot;29428396&quot; &quot;29415642&quot; &quot;29385186&quot; &quot;29317319&quot; We can then use this list of IDs to assemble a URL for either fetching or for obtaining summary information of documents: # parameters for esummary params_esummary &lt;- paste0( &quot;db=pubmed&amp;id=&quot;, paste(ids, collapse = &quot;,&quot;)) # assemble an essumary URL summaries_query &lt;- paste0(entrez_url, esummary, params_esummary) summaries_xml &lt;- read_xml(summaries_query) With the base URL, the esearch utility, and the parameters, we assemble the required URL that we can pass to read_xml(), and then use html_nodes() and html_text() to extract the summary of documents: Let’s take a look at the first node with xml_child() xml_child(summaries_xml, search = 1) #&gt; {xml_node} #&gt; &lt;DocSum&gt; #&gt; [1] &lt;Id&gt;31771501&lt;/Id&gt; #&gt; [2] &lt;Item Name=&quot;PubDate&quot; Type=&quot;Date&quot;&gt;2019 Oct&lt;/Item&gt; #&gt; [3] &lt;Item Name=&quot;EPubDate&quot; Type=&quot;Date&quot;/&gt; #&gt; [4] &lt;Item Name=&quot;Source&quot; Type=&quot;String&quot;&gt;Toxicol Ind Health&lt;/Item&gt; #&gt; [5] &lt;Item Name=&quot;AuthorList&quot; Type=&quot;List&quot;&gt;\\n &lt;Item Name=&quot;Author&quot; Type=&quot;String ... #&gt; [6] &lt;Item Name=&quot;LastAuthor&quot; Type=&quot;String&quot;&gt;Sun Z&lt;/Item&gt; #&gt; [7] &lt;Item Name=&quot;Title&quot; Type=&quot;String&quot;&gt;Oral exposure to low-dose bisphenol A i ... #&gt; [8] &lt;Item Name=&quot;Volume&quot; Type=&quot;String&quot;&gt;35&lt;/Item&gt; #&gt; [9] &lt;Item Name=&quot;Issue&quot; Type=&quot;String&quot;&gt;10&lt;/Item&gt; #&gt; [10] &lt;Item Name=&quot;Pages&quot; Type=&quot;String&quot;&gt;647-659&lt;/Item&gt; #&gt; [11] &lt;Item Name=&quot;LangList&quot; Type=&quot;List&quot;&gt;\\n &lt;Item Name=&quot;Lang&quot; Type=&quot;String&quot;&gt;En ... #&gt; [12] &lt;Item Name=&quot;NlmUniqueID&quot; Type=&quot;String&quot;&gt;8602702&lt;/Item&gt; #&gt; [13] &lt;Item Name=&quot;ISSN&quot; Type=&quot;String&quot;&gt;0748-2337&lt;/Item&gt; #&gt; [14] &lt;Item Name=&quot;ESSN&quot; Type=&quot;String&quot;&gt;1477-0393&lt;/Item&gt; #&gt; [15] &lt;Item Name=&quot;PubTypeList&quot; Type=&quot;List&quot;&gt;\\n &lt;Item Name=&quot;PubType&quot; Type=&quot;Stri ... #&gt; [16] &lt;Item Name=&quot;RecordStatus&quot; Type=&quot;String&quot;&gt;PubMed - indexed for MEDLINE&lt;/Item&gt; #&gt; [17] &lt;Item Name=&quot;PubStatus&quot; Type=&quot;String&quot;&gt;ppublish&lt;/Item&gt; #&gt; [18] &lt;Item Name=&quot;ArticleIds&quot; Type=&quot;List&quot;&gt;\\n &lt;Item Name=&quot;pubmed&quot; Type=&quot;String ... #&gt; [19] &lt;Item Name=&quot;DOI&quot; Type=&quot;String&quot;&gt;10.1177/0748233719885565&lt;/Item&gt; #&gt; [20] &lt;Item Name=&quot;History&quot; Type=&quot;List&quot;&gt;\\n &lt;Item Name=&quot;entrez&quot; Type=&quot;Date&quot;&gt;201 ... #&gt; ... The obtained summary information contains various fields such as date of publication PubDate, list of authors AuthorList, title Title, starting and ending pages Pages, etc. Extracting text of Titles To extract all the titles, we look for the Item nodes with argument Name=\"Title\". To be more precise, we can define an XPath pattern '//Item[@Name=\"Title\"]' for xml_nodes(), and then extract the content with xml_text() title_nodes &lt;- xml_nodes(summaries_xml, xpath = &#39;//Item[@Name=&quot;Title&quot;]&#39;) titles &lt;- xml_text(title_nodes) head(titles) #&gt; [1] &quot;Oral exposure to low-dose bisphenol A induces hyperplasia of dorsolateral prostate and upregulates EGFR expression in adult &lt;i&gt;Sprague-Dawley&lt;/i&gt; rats.&quot; #&gt; [2] &quot;Juvenile Toxicity Rodent Model to Study Toxicological Effects of Bisphenol A (BPA) at Dose Levels Derived From Italian Children Biomonitoring Study.&quot; #&gt; [3] &quot;Bisphenol F exposure impairs neurodevelopment in zebrafish larvae (Danio rerio).&quot; #&gt; [4] &quot;Effects of Dietary Bisphenol A on the Reproductive Function of Gilthead Sea Bream (&lt;i&gt;Sparus aurata&lt;/i&gt;) Testes.&quot; #&gt; [5] &quot;Urinary bisphenol A concentration is correlated with poorer oocyte retrieval and embryo implantation outcomes in patients with tubal factor infertility undergoing in vitro fertilisation.&quot; #&gt; [6] &quot;In utero exposure to persistent and nonpersistent endocrine-disrupting chemicals and anogenital distance. A systematic review of epidemiological studies†.&quot; "]
]
