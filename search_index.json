[
["apis.html", "43 Web APIs 43.1 Introduction 43.2 A little bit about APIs 43.3 Using R as an HTTP Client 43.4 Interacting with AP’s via R 43.5 BART API Documentation", " 43 Web APIs In this chapter we’ll give you a crash introduction to Web APIs, and how to use R for interacting with them. You will need the following packages library(httr) library(jsonlite) 43.1 Introduction So far we’ve been dealing with data sets in various formats: internal data objects in R (e.g. data tibble starwars), builti-in data frames such as mtcars or oldfaithful), reading files stored in your computer (txt, csv, tsv, etc). But you also need to learn how to get data from the web. For better or for worse, reading data from the Web entails a whole other set of considerations. Because of the large variety of data formats available in the Web, we will primarily focus on retrieving data from Application Programming Interfaces also known as APIs. The reason to focus on APIs is because nowadays many companies, websites, sources, etc. use APIs as their primary means to share information and data. Many large websites like Reddit, Twitter and Facebook offer APIs so that data analysts and data scientists can access interesting data. And having an API to share data has become a standard thing to have. 43.2 A little bit about APIs API stands for Application Programming Interface. If this sounds too fancy or cryptic for you, then simply think of it as a “Data Sharing Interface”. Instead of having to download a data file, an API allows programmers to request data directly from a website. What is an API? “API” is a general term for the place where one computer program (the client) interacts with another (the server), or with itself. APIs offer data scientists a polished way to request clean and curated data from a website. When a website like Facebook sets up an API, they are essentially setting up a computer that waits for data requests. Once this computer receives a data request, it will do its own processing of the data and send it to the computer that requested it. From our perspective as the requester, we will need to write code in R that creates the request and tells the computer running the API what we need. That computer will then read our code, process the request, and return nicely-formatted data that can be easily parsed by existing R libraries. Why to use an API? Why is this valuable? Contrast the API approach to pure web scraping. When a programmer scrapes a web page, they receive the data in a messy chunk of HTML. While there are certainly libraries out there that make parsing HTML text easy, these are all cleaning steps that need to be taken before we even get our hands on the data we want! Often, we can immediately use the data we get from an API, which saves us time and frustration. 43.3 Using R as an HTTP Client R has a few HTTP client packages: \"crul\", \"curl\", \"httr\", and \"RCurl\"; you can think of them as “high-level R HTTP clients” which basically let you use R (and our computer) as an HTTP client. We will describe how to use functions from \"httr\". 43.4 Interacting with AP’s via R In R, we can use the \"httr\" library to make http requests and handle the responses. Let’s start with baby steps using the website https://api.adviceslip.com/ which provides an API to get advice from the internet. The first thing you need to do is to look at the web page to familiarize yourself with the functionalities it provides. Figure 43.1: Advice Slip JSON API The url https://api.adviceslip.com/random will give you a random advice: Figure 43.2: Random advice from Advice Slip 43.4.1 Making request from R Notice that the format of the response is provided in JSON. For instance, getting a random advice is quite simple, all you need is to make a GET request. The associated function in \"httr\" is GET() which makes a request to the URL https://api.adviceslip.com/advice # getting a random advice request_url &lt;- &quot;https://api.adviceslip.com/advice&quot; request_get &lt;- GET(request_url) request_get #&gt; Response [https://api.adviceslip.com/advice] #&gt; Date: 2020-10-19 20:25 #&gt; Status: 200 #&gt; Content-Type: text/html; charset=UTF-8 #&gt; Size: 68 B Response [https://api.adviceslip.com/advice] Date: 2020-10-16 02:08 Status: 200 Content-Type: text/html; charset=UTF-8 Size: 77 B The object request_get is an object of class \"response\", which is basically an R list that contains 10 elements: class(request_get) #&gt; [1] &quot;response&quot; is.list(request_get) #&gt; [1] TRUE names(request_get) #&gt; [1] &quot;url&quot; &quot;status_code&quot; &quot;headers&quot; &quot;all_headers&quot; &quot;cookies&quot; #&gt; [6] &quot;content&quot; &quot;date&quot; &quot;times&quot; &quot;request&quot; &quot;handle&quot; As you can tell, one of the elements in request_get is \"content\". If you try the $ operator to extract this element and print it, you will get something like this: request_get$content #&gt; [1] 7b 22 73 6c 69 70 22 3a 20 7b 20 22 69 64 22 3a 20 31 30 37 2c 20 22 61 64 #&gt; [26] 76 69 63 65 22 3a 20 22 49 66 20 79 6f 75 20 64 6f 6e 27 74 20 61 73 6b 2c #&gt; [51] 20 79 6f 75 20 64 6f 6e 27 74 20 67 65 74 2e 22 7d 7d which is not very helpful. Instead of directly extracting the \"content\" element, it is recommended to use the extractor function content() which will return the content in the form of an \"html_document\" object: content(request_get) #&gt; {html_document} #&gt; &lt;html&gt; #&gt; [1] &lt;body&gt;&lt;p&gt;{&quot;slip&quot;: { &quot;id&quot;: 107, &quot;advice&quot;: &quot;If you don&#39;t ask, you don&#39;t get ... The above output is not the most friendly one. However, we can use the argument as = \"text\" to change the output into a character vector: request_content &lt;- content(request_get, as = &quot;text&quot;) request_content #&gt; [1] &quot;{\\&quot;slip\\&quot;: { \\&quot;id\\&quot;: 107, \\&quot;advice\\&quot;: \\&quot;If you don&#39;t ask, you don&#39;t get.\\&quot;}}&quot; It turns out that this content is in JSON format. Therefore, we need to use a converting function fromJSON() fromJSON(request_content) #&gt; $slip #&gt; $slip$id #&gt; [1] 107 #&gt; #&gt; $slip$advice #&gt; [1] &quot;If you don&#39;t ask, you don&#39;t get.&quot; All of the above steps can be compactly integrated into a single block of code using the piper opeartor %&gt;% as follows: # getting a random advice request_url &lt;- &quot;https://api.adviceslip.com/advice&quot; random_advice &lt;- request_url %&gt;% GET() %&gt;% content(as = &quot;text&quot;) %&gt;% fromJSON() names(random_advice) random_advice$slip Example: Search with Advice ID Figure 43.3: Random advices by id For example, the id = 5 results in the following advice: Figure 43.4: Random advice from Advice Slip # advice id=5 advice_id5 &lt;- &quot;https://api.adviceslip.com/advice/5&quot; %&gt;% GET() %&gt;% content(as = &quot;text&quot;) %&gt;% fromJSON() names(advice_id5) advice_id5$slip Example: Search Query You can search for an advice specifying a search query: Figure 43.5: Random advices with search query https://api.adviceslip.com/advice/search/chance Figure 43.6: Random advices with search query ‘chance’ Let’s search for the term chance # advice query &#39;chance&#39; advice_chance &lt;- &quot;https://api.adviceslip.com/advice/search/chance&quot; %&gt;% GET() %&gt;% content(as = &quot;text&quot;) %&gt;% fromJSON() names(advice_chance) advice_chance$slip 43.5 BART API Documentation We will use BART Developer Program as an example. https://www.bart.gov/about/developers Information is available in the following resource: https://api.bart.gov/docs/overview/index.aspx The BART API gives you access to pretty much all of the BART service and station data available on the BART website. Check out an overview or read our simple License Agreement then jump right in with your own API validation key. Public Key Information is available in the following resource: https://www.bart.gov/schedules/developers/api BART Public API key (no strings attached) MW9S-E7SL-26DU-VV8V “We won’t make you register for BART open data. Just follow our short and simple License Agreement, give our customers good information and don’t hog community resources:” 43.5.1 Station Information API https://api.bart.gov/docs/stn/index.aspx There is a command called stns that gives you the list of BART stations Output format is available in JSON and XML. Examples: XML: http://api.bart.gov/api/stn.aspx?cmd=stns&amp;key=MW9S-E7SL-26DU-VV8V JSON: http://api.bart.gov/api/stn.aspx?cmd=stns&amp;key=MW9S-E7SL-26DU-VV8V&amp;json=y 43.5.2 Rules of API-etiquette Last but not least, when using an API you should adhere to common rules of netiquette. Most APIs don’t allow you to send too many requests at once (i.e. asynchronous requests). The main reason to limit the number of requests is to prevent users from overloading the API servers. Bombarding an API might put it in trouble by asking too many things in one go and you probably don’t want to break things. "]
]
